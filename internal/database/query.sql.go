// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
)

const addLLM = `-- name: AddLLM :one
INSERT INTO llms (string, name, provider_id, context_size) VALUES (?, ?, ?, ?) RETURNING id, string, name, provider_id, context_size, capabilities, is_enabled, created_at, updated_at
`

type AddLLMParams struct {
	String      string
	Name        string
	ProviderID  int64
	ContextSize int64
}

func (q *Queries) AddLLM(ctx context.Context, arg AddLLMParams) (Llm, error) {
	row := q.db.QueryRowContext(ctx, addLLM,
		arg.String,
		arg.Name,
		arg.ProviderID,
		arg.ContextSize,
	)
	var i Llm
	err := row.Scan(
		&i.ID,
		&i.String,
		&i.Name,
		&i.ProviderID,
		&i.ContextSize,
		&i.Capabilities,
		&i.IsEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addProvider = `-- name: AddProvider :one
INSERT INTO providers (type, url) VALUES (?, ?) RETURNING id, type, url, created_at
`

type AddProviderParams struct {
	Type string
	Url  string
}

func (q *Queries) AddProvider(ctx context.Context, arg AddProviderParams) (Provider, error) {
	row := q.db.QueryRowContext(ctx, addProvider, arg.Type, arg.Url)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Url,
		&i.CreatedAt,
	)
	return i, err
}

const getLLMs = `-- name: GetLLMs :many
SELECT id, string, name, provider_id, context_size, capabilities, is_enabled, created_at, updated_at FROM llms ORDER BY id
`

func (q *Queries) GetLLMs(ctx context.Context) ([]Llm, error) {
	rows, err := q.db.QueryContext(ctx, getLLMs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Llm
	for rows.Next() {
		var i Llm
		if err := rows.Scan(
			&i.ID,
			&i.String,
			&i.Name,
			&i.ProviderID,
			&i.ContextSize,
			&i.Capabilities,
			&i.IsEnabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProviders = `-- name: GetProviders :many
SELECT id, type, url, created_at FROM providers ORDER BY id
`

func (q *Queries) GetProviders(ctx context.Context) ([]Provider, error) {
	rows, err := q.db.QueryContext(ctx, getProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Provider
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Url,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
